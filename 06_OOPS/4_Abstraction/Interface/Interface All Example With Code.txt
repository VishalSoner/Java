
we can't create method body in interface.
*/

interface Inter1
{
	void show()
	{}
}
class Q01_Interface
{
	public static void main(String args[])
	{
	}
}

/* 

error: interface abstract methods cannot have body
        {}
        ^
--------------------------------------------------------------------------------------------- 
*/




/*
	we can create abstract method(Without Body) in interface.
*/

interface Inter1
{
	void show();
}
class Q02_Interface
{
	public static void main(String args[])
	{
		System.out.println("Work");
	}
}

/* 

Work
--------------------------------------------------------------------------------------------- 
*/




/*
	To Access Interface we need to implement the interface, Using implements keywork.
*/

interface Inter1
{
	void show();
}

class A implements Inter1
{}

class Q03_Interface
{
	public static void main(String args[])
	{
		System.out.println("Work");
	}
}

/* 

error: A is not abstract and does not override abstract method show() in Inter1
class A implements Inter1
^
--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	void show();
}

class A implements Inter1
{
	void show()
	{
		System.out.println("Class A");
	}
}

class Q04_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: show() in A cannot implement show() in Inter1
    void show()
         ^
--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	void show();
}

class A implements Inter1
{
	public void show()
	{
		System.out.println("Class A");
	}
}

class Q05_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

Class A
--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	int x = 10;
}

class A implements Inter1
{
	public void show()
	{
		System.out.println("X  :  " + x);
	}
}

class Q06_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

X  :  10

--------------------------------------------------------------------------------------------- 
*/




/*
we can't modify the data of interface, 
Because interface variable have with 3 keywords 
1. static,  2. final,   3. public.

*/

interface Inter1
{
	int x = 10;
}

class A implements Inter1
{
	public void show()
	{
		x = 20;
		System.out.println("X  :  " + x);
	}
}

class Q07_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: cannot assign a value to final variable x
                x = 20;
                ^

--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	int x = 10;
}

class A implements Inter1
{
	public void show()
	{
		int x = 20;
		System.out.println("X  :  " + x);
	}
}

class Q08_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

x = 20;


--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	int x = 10;
}

class A implements Inter1
{
	int x = 20;
	public void show()
	{
		int x = 30;
		System.out.println("X  :  " + x);
		System.out.println("X  :  " + this.x);
		System.out.println("X  :  " + super.x);
	}
}

class Q09_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: cannot find symbol
    System.out.println("X  :  " + super.x);
                                       ^

--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	int x = 10;
}

class A implements Inter1
{
	int x = 20;
	public void show()
	{
		int x = 30;
		System.out.println("X  :  " + x);
		System.out.println("X  :  " + this.x);
		System.out.println("X  :  " + Inter1.x);
	}
}

class Q10_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

x : 30
x : 20
x : 10

--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	int x = 100;
}

interface Inter2
{
	int x = 200;
}

class A implements Inter1, Inter2
{
	public void show()
	{
		System.out.println("X  :  " + x);
	}
}

class Q11_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: reference to x is ambiguous
    System.out.println("X  :  " + x);
								  ^
--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	void show();
}

interface Inter2
{
	void show();
}

class A implements Inter1, Inter2
{
	public void show()
	{
		System.out.println("Show Method");
	}
}

class Q12_Interface
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

Show Method

--------------------------------------------------------------------------------------------- 
*/




/*
	Version 1.8 ke Corresponding interface ke ander default method wali bana sakte he.
*/

interface Inter1
{
	default void show()
	{
		System.out.println("Default Method");
	}
}
class A implements Inter1
{
}

class Q13_Interface_Default_Method
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

Default Method

--------------------------------------------------------------------------------------------- 
*/




/*
	Q1. Kya ham Default Method ko OverRide kar karte he
	Ans Yes, we can OverRide Interface Default Method.
*/

interface Inter1
{
	default void show()
	{
		System.out.println("Default Method Interface Inter1");
	}	
}
class A implements Inter1
{
	public void show()
	{
		System.out.println("Default Method Class A");
	}
}

class Q14_Interface_Default_Method
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

Default Method Class Ad

--------------------------------------------------------------------------------------------- 
*/




/*
	Q2. Why we add default method in interface.
	Ans Yadi ham chate he implement class me interface me method add karne se koi effect na ho 
		esha liye default method ka use kar sakte he.
*/

interface Inter1
{
	default void show()
	{
		System.out.println("Default Method Interface Inter1");
	}	
}

interface Inter2
{
	default void show()
	{
		System.out.println("Default Method Interface Inter2");
	}	
}

class A implements Inter1, Inter2
{
}

class Q15_Interface_Default_Method
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: class A inherits unrelated defaults for show() from types Inter1 and Inter2
class A implements Inter1, Inter2
^

--------------------------------------------------------------------------------------------- 
*/




/*
	Q2. Why we add default method in interface.
	Ans Yadi ham chate he implement class me interface me method add karne se koi effect na ho 
		esha liye default method ka use kar sakte he.
*/

interface Inter1
{
	default void show()
	{
		System.out.println("Default Method Interface Inter1");
	}	
}

interface Inter2
{
	default void show()
	{
		System.out.println("Default Method Interface Inter2");
	}	
}

class A implements Inter1, Inter2
{
	public void show()
	{
		Inter1.super.show();
		Inter2.super.show();
	}
}

class Q16_Interface_Default_Method
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

Default Method Interface Inter1
Default Method Interface Inter2

--------------------------------------------------------------------------------------------- 
*/




/*
	Q3. Kya Static Method ko v Interface ke andar bana sakte he.
	Ans Yes.
*/

interface Inter1
{
	static void show()
	{
		System.out.println("Static Method Interface Inter1");
	}	
}

class A implements Inter1
{
}

class Q17_Interface_Default_Method
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: cannot find symbol
                a.show();
                 ^
--------------------------------------------------------------------------------------------- 
*/




/*
	Q3. Kya Static Method ko v Interface ke andar bana sakte he.
	Ans Yes.
*/

interface Inter1
{
	static void show()
	{
		System.out.println("Static Method Interface Inter1");
	}	
}

class A implements Inter1
{
}

class Q18_Interface_Default_Method
{
	public static void main(String args[])
	{
		Inter1.show();
	}
}

/* 

Static Method Interface Inter1

--------------------------------------------------------------------------------------------- 
*/




interface Inter1
{
	static void show()
	{
		System.out.println("Static Method Interface Inter1");
	}	
}

class A implements Inter1
{
	void show()
	{
		Inter1.show();
		System.out.println("Class A Show Method");
	}
}

class Q19_Interface_Default_Method
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

Class A Show Method

--------------------------------------------------------------------------------------------- 
*/






/*
	Q4. Kya ham main method ko Interface Bana sakte he
	Ans Yes
*/

interface Q20_Interface_Main_Method
{
	public static void main(String args[])
	{
		System.out.println("Interface Main Method");
	}
}

/* 

Interface Main Method



1. Interface ki c ek .class file banti he.
2. Constructor , interface me nai bana sakt ehe kyu ki Constructor ka use instance variable ko initialize ke liye use karte he.
   Or Interface me Instance variable nai hote he,
   (Variable Hote he But bo Static Variable hote he with final Keyword).


--------------------------------------------------------------------------------------------- 
*/













/*
	Interface ka referance variable sub-class ke Object ko Hold kar sakta he.
*/

interface Inter1
{
	void show();
}

class A implements Inter1
{
	public void show()
	{
		System.out.println("Show Method");
	}
}

class Q21_Interface_Class_Referance_Variable
{
	public static void main(String args[])
	{
		Inter1 in = new A();
		in.show();
	}
}

/* 

Show Method

--------------------------------------------------------------------------------------------- 
*/




/*
	Class Ke Andar Interface Bana sakte he.
*/
class A 
{
	interface Inter1
	{
		void show();
	}
}
class B extends A
{
	public void show()
	{
		System.out.println("Show Method");
	}
}

class Q22_Class_WithIn_Interface
{
	public static void main(String args[])
	{
		B b = new B();
		b.show();
	}
}

/* 

Show Method

--------------------------------------------------------------------------------------------- 
*/






/*
	Interface Ke Andar Interface Bana sakte he.
*/
interface A
{
	void show1();
	interface Inter1
	{
		void show2();
	}
}

class B1 implements A
{
	public void show1()
	{
		System.out.println("Show Method - 1");
	}
}

class B2 implements A.Inter1
{
	public void show2()
	{
		System.out.println("Show Method - 2");
	}
}

class Q23_Interface_WithIn_Interface
{
	public static void main(String args[])
	{
		B1 b1 = new B1();
		b1.show1();
		
		B2 b2 = new B2();
		b2.show2();
	}
}

/* 

Show Method - 1
Show Method - 2

--------------------------------------------------------------------------------------------- 
*/




/*
	Interface Ke Andar Class Bana sakte he.
*/
interface Inter1
{
	class A
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
}

class Q24_Interface_WithIn_Class
{
	public static void main(String args[])
	{
		Inter1.A a = new Inter1.A();
		a.show1();
	}
}

/* 

Show Method - 1

--------------------------------------------------------------------------------------------- 
*/




/*
	Interface Ke Andar Class Bana sakte he.
*/
interface Inter1
{
	class A
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
}

class B implements Inter1
{}

class Q25_Interface_WithIn_Class
{
	public static void main(String args[])
	{
		// 01
		// B b1 = new B();
		// b1.show1();
		
		// 02
		// A.B b2 = new A.B();
		// b2.show1();
		
		// 03
		B.A b3 = new B.A();
		b3.show1();
	}
}

/* 

// 01
 error: cannot find symbol
    b1.show();
    ^

// 02
error: cannot find symbol
    A.B b2 = new A.B();
     ^

// 03
Show - 1

--------------------------------------------------------------------------------------------- 
*/




/*
	Yah Class A ko inherite kiy he na ki interface ko.
*/
interface Inter1
{
	class A
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
}

class B extends Inter1.A
{}

class Q26_Interface_WithIn_Class
{
	public static void main(String args[])
	{
		// 01
		B b1 = new B();
		b1.show1();
	}
}

/* 

// 01
Show - 1

--------------------------------------------------------------------------------------------- 
*/




