class Q01_Instance_Inner_Class
{
	class A
	{
		
	}
}


/* 
javac Q01_Instance_Inner_Class.java (Compile then)
	1.Q01_Instance_Inner_Class.class
	2.Q01_Instance_Inner_Class$A.class



 Main method not found in class Q01_Instance_Inner_Class, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application

--------------------------------------------------------------------------------------
*/





class Q02_Instance_Inner_Class
{
	class A
	{
		
	}
	public static void main( String args[])
	{
		System.out.println("Vishal Soner");
	}
}

/* 

Vishal Soner
--------------------------------------------------------------------------------------
*/








/* 
1. We can't Declare main method in inner class.
2. We can't Create Static method in inner class. 

*/

class Q03_Instance_Inner_Class
{
	class A
	{
		public static void main( String args[])
		{
			System.out.println("Vishal Soner");
		}
	}
}

/* 

error: Illegal static declaration in inner class Q03_Instance_Inner_Class.A
                public static void main( String args[])
--------------------------------------------------------------------------------------
*/







class Q04_Instance_Inner_Class
{
	class A
	{
		void show()
		{
			System.out.println("Show Method");
		}
	}
	public static void main( String args[])
	{
		System.out.println("Vishal Soner");
	}
}

/* 

Vishal Soner

--------------------------------------------------------------------------------------
*/







class Q05_Instance_Inner_Class
{
	int x = 10;

	public static void main( String args[])
	{
		System.out.println("Vishal Soner");
		System.out.println("X : " + x);
	}
}

/* 

error: non-static variable x cannot be referenced from a static context
                System.out.println("X : " + x);
                                            ^
--------------------------------------------------------------------------------------
*/







class Q06_Instance_Inner_Class
{
	int x = 10;
	
	void show()
	{
		System.out.println("Show Method");
	}
	
	
	public static void main( String args[])
	{
		System.out.println("Vishal Soner");
		show();
	}
}

/* 

 error: non-static method show() cannot be referenced from a static context
                show();
                ^
--------------------------------------------------------------------------------------
*/







class Q07_Instance_Inner_Class
{
	int x = 10;
	
	void show()
	{
		System.out.println("Show Method");
	}
	
	
	public static void main( String args[])
	{
		System.out.println("Vishal Soner");
		Q07_Instance_Inner_Class q7 = new Q07_Instance_Inner_Class();
		q7.show();
	}
}

/* 

Vishal Soner
Show Method
--------------------------------------------------------------------------------------
*/







class Q08_Instance_Inner_Class
{
	int x = 10;
	void show()
	{
		System.out.println("Show Method");
	}
	
	class A
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
	
	public static void main( String args[])
	{
		System.out.println("Vishal Soner");
		Q08_Instance_Inner_Class q8 = new Q08_Instance_Inner_Class();
		
		System.out.println("X : " + q8.x );
		q8.show();
		
		q8.show1();
		
		
	}
}

/* 
 
error: cannot find symbol
               q8.show1();
                 ^
				  
--------------------------------------------------------------------------------------
*/







class Q09_Instance_Inner_Class
{
	int x = 10;
	void show()
	{
		System.out.println("Show Method - 0");
	}
	
	class A
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
	
	public static void main( String args[])
	{
		Q09_Instance_Inner_Class q9 = new Q09_Instance_Inner_Class();
		
		System.out.println("X : " + q9.x);
		q9.show();
		
		Q09_Instance_Inner_Class.A a1 = q9.new A();
		a1.show1();
		
	}
}

/* 
 
 X : 10
Show Method - 0
Show Method - 1
 
 
--------------------------------------------------------------------------------------
*/







class Q10_Instance_Inner_Class
{
	int x = 10;
	void show()
	{
		System.out.println("Show Method - 0");
	}
	
	class A
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
	
	public static void main( String args[])
	{
		Q10_Instance q10 = new Q10_Instance();
		
		System.out.println("X : " + q10.x);
		q10.show();
		
		A a1 = q10.new A();
		a1.show1();
		
	}
}

/* 
 
X : 10
Show Method - 0
Show Method - 1
 
 
--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
}


class Q11_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		B b = a.new B();
		
		b.show1();
	}
}

/* 
 
error: cannot find symbol
    B b = a.new B();
	^ 
 
--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
}


class Q12_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		A.B b = a.new B();
		
		b.show1();
	}
}

/* 
 
Show Method - 1 
 
--------------------------------------------------------------------------------------
*/







class A
{
	int x = 10;
	void show1()
	{
		System.out.println("X : "  + x);
		B b = new B();
		b.show2();
		
	}
	class B
	{
		void show2()
		{
			System.out.println("Show Method - 2");
		}
	}
}


class Q13_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
	}
}

/* 
 
X : 10
Show Method - 2 
 
--------------------------------------------------------------------------------------
*/







1.	Instance Method/ Static Methdo, Static or Non-Static Data(Method or Variable) ko Direct access kar sakte he.
2.	Static Method , Only Static Data(Method or Variable) ko Direct access kar sakte he.




class A
{
	int x = 10;
	static void show1()
	{
		System.out.println("X : "  + x);
		B b = new B();
		b.show2();
		
	}
	class B
	{
		void show2()
		{
			System.out.println("Show Method - 2");
		}
	}
}


class Q14_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
	}
}

/* 
 
error: non-static variable x cannot be referenced from a static context
                System.out.println("X : "  + x);
                                             ^
Q14_Instance_Inner_Class.java:7: error: non-static variable this cannot be referenced from a static context
                B b = new B();
                      ^
 
--------------------------------------------------------------------------------------
*/







class A
{
	int x = 10;
	static void show1()
	{
		A a = new A();
		System.out.println("X : "  + a.x);
		
		A.B b = a.new B();
		b.show2();
		
	}
	class B
	{
		void show2()
		{
			System.out.println("Show Method - 2");
		}
	}
}


class Q15_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
	}
}

/* 
 
X : 10
Show Method - 2
--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		void show1()
		{
			System.out.println("Show Method - 1");
		}
	}
}


class Q16_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		A.B b = a.new B();
		
		b.show1();
	}
}

/* 
 
Show Method - 1
--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		class C 
		{
			void show1()
			{
				System.out.println("Show Method - 1");
			}
		}
	}
}


class Q17_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		A.B b = a.new B();
		A.B.C c = b.new C();
		
		
		c.show1();
	}
}

/* 
 
Show Method - 1
--------------------------------------------------------------------------------------
*/



class A
{
	int x = 10;
	static int y = 20;

	class B
	{
		void show1()
		{
			System.out.println("X : " + x);
			System.out.println("Y : " + y);
		}
	}
}


class Q18_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.B b = a.new B();
		b.show1();
	}
}

/* 
 
X : 10
Y : 20

--------------------------------------------------------------------------------------
*/














class A
{
	int x = 10;

	class B
	{
		int x = 200;
		void show1()
		{
			int x = 3000;
			System.out.println("X : " + x);
			System.out.println("X : " + this.x);
			
			System.out.println("X : " + A.this.x);
			System.out.println("X : " + B.this.x);
		}
	}
}


class Q19_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.B b = a.new B();
		b.show1();
	}
}

/* 
 
X : 3000
X : 200
X : 10
X : 200

--------------------------------------------------------------------------------------
*/







class A
{
	int x = 10;
}


class Q20_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		System.out.println ("X : " + a.x);
	}
}

/* 
 
X : 10

--------------------------------------------------------------------------------------
*/







class A
{
	private int x = 10;
}


class Q21_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		System.out.println ("X : " + a.x);
	}
}

/* 
 
 error: x has private access in A
                System.out.println ("X : " + a.x);
                                              ^

--------------------------------------------------------------------------------------
*/







class A
{
	private int x = 10;
	
	void show()
	{
		System.out.println ("X : " + x);
	}
}


class Q22_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 
 
X : 10

--------------------------------------------------------------------------------------
*/







/* 
	Outer Class Ke Private Data Ko inner Class ke Ander use kar sakte he 
*/

class A
{
	private int x = 10;
	
	class B
	{
		void show()
		{
			System.out.println ("X : " + x);
		}
	}
}


class Q23_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 
 
X : 10

--------------------------------------------------------------------------------------
*/







/* 
	1. Hum Outer class ko Private nai Bana sakte he.
	2. Inner Class ko Private Kar sakte he.
	
	Outer Class Will be : default, public, final, abstract, starictfe
	Inner Class Will be : Outer 5 +  private, static, protected
*/

private class A
{
	private int x = 10;
	
	class B
	{
		void show()
		{
			System.out.println ("X : " + x);
		}
	}
}


class Q24_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 
 
error: modifier private not allowed here
private class A
        ^
Q24_Instance_Inner_Class.java:28: error: cannot find symbol
                a.show();
                 ^
--------------------------------------------------------------------------------------
*/







/* 
	1. Hum Outer class ko Private nai Bana sakte he.
	2. Inner Class ko Private Kar sakte he.
	
	Outer Class Will be : default, public, final, abstract, starictfe
	Inner Class Will be : Outer 5 +  private, static, protected
*/

class A
{
	private int x = 10;
	
	private class B
	{
		void show()
		{
			System.out.println ("X : " + x);
		}
	}
}


class Q25_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		System.out.println("Private Inner Class");
	}
}

/* 

Private Inner Class
 
--------------------------------------------------------------------------------------
*/







class A
{
	private int x = 10;
	
	private class B
	{
		void show()
		{
			System.out.println ("X : " + x);
		}
	}
}


class Q26_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		A.B b = a.new B();
		
		b.show();
	}
}

/* 

error: A.B has private access in A
    A.B b = a.new B();
    ^
	
error: A.B has private access in A
    A.B b = a.new B();
				  ^
 
--------------------------------------------------------------------------------------
*/







class A
{
	private int x = 10;
	
	private class B
	{
		void show2()
		{
			System.out.println ("Class B");
			System.out.println ("X : " + x);
		}
	}
	
	void show1()
	{
		B b = new B();
		b.show2();
	}
}


class Q27_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		a.show1();
	}
}

/* 

Class B
X : 10
 
--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("Constructor");
	}
	void show1()
	{
		System.out.println("Show1 Method");
	}
}


class Q28_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
	}
}

/* 

Constructor
Show1 Method
 
--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("Constructor");
	}
	void show1()
	{
		System.out.println("Show1 Method");
	}
	
	{
		System.out.println("Instance Block");
	}
}


class Q29_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
	}
}

/* 

Instance Block
Constructor
Show1 Method
 
--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("Constructor");
	}
	void show1()
	{
		System.out.println("Show1 Method");
	}
	
	{
		System.out.println("Instance Block");
	}
	
	static
	{
		System.out.println("Static Block");
	}
}


class Q30_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
	}
}

/* 

Static Block
Instance Block
Constructor
Show1 Method
 
--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("Constructor");
	}
	void show1()
	{
		System.out.println("Show1 Method");
	}
	
	{
		System.out.println("Instance Block");
	}
	
	static
	{
		System.out.println("Static Block");
	}
}


class Q31_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		a.show1();
		a.show1();
	}
}

/* 

Static Block
Instance Block
Constructor
Show1 Method
Show1 Method
 
--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("Constructor");
	}
}


class Q32_Instance_Inner_Class
{
	public static void main( String args[])
	{
		new A();
	}
}

/* 

Constructor
 
--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("Constructor");
	}

	{
		System.out.println("Instance Block");
	}

}


class Q33_Instance_Inner_Class
{
	public static void main( String args[])
	{
		new A();
	}
}

/* 

Instance Block
Constructor
 
--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		void show()
		{
			System.out.println("Show Method");
		}
	}
}


class Q34_Instance_Inner_Class
{
	public static void main( String args[])
	{
		new A().new B().show();
	}
}

/*

show Method

--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		void show()
		{
			System.out.println("Show Method");
		}
	}
}


class Q35_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A.B b = new A().new B();
		
		b.show();
	}
}

/*

show Method

--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		class C
		{
			void show()
			{
				System.out.println("Show Method");
			}
		}
	}
}


class Q36_Instance_Inner_Class
{
	public static void main( String args[])
	{
		new A().new B().new C().show();
	}
}

/*

show Method

--------------------------------------------------------------------------------------
*/







/* 
	1. We can't create Static Block in Instance Inner Class.
	2. But We can create Instance Block in Instance Inner Class.
 */

class A
{
	static
	{
		System.out.println("A - Static Block");
	}
	class B 
	{
		static
		{
			System.out.println("B - Static Block");
		}
	}
}


class Q37_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.B b = a.new B();
	}
}

/*

error: Illegal static declaration in inner class A.B
                static
                ^

--------------------------------------------------------------------------------------
*/







/* 
	1. We can't create Static Block in Instance Inner Class.
	2. But We can create Instance Block in Instance Inner Class.
 */

class A
{
	{
		System.out.println("A - Instance Block");
	}
	class B 
	{
		{
			System.out.println("B - Instance Block");
		}
	}
}


class Q38_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		A.B b = a.new B();
	}
}

/*

		
A - Instance Block
B - Instance Block

--------------------------------------------------------------------------------------
*/







class A
{
	{
		System.out.println("A - Instance Block");
	}
	A()
	{
		System.out.println("A - Constructor");
	}
	
	class B 
	{
		{
			System.out.println("B - Instance Block");
		}
		B()
		{
			System.out.println("B - Constructor");
		}
	}
}


class Q39_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		A.B b = a.new B();
	}
}

/*

		
A - Instance Block
A - Constructor
B - Instance Block
B - Constructor

--------------------------------------------------------------------------------------
*/







class A
{
	void show1()
	{
		System.out.println("A - Show1 Method");
	}
}

class B extends A
{
	void show2()
	{
		System.out.println("B - Show2 Method");
	}
}


class Q40_Instance_Inner_Class
{
	public static void main( String args[])
	{
		B b = new B();
		
		b.show1();
		b.show2();
	}
}

/*

		
A - Show1 Method
B - Show2 Method

--------------------------------------------------------------------------------------
*/







class A
{
	class B 
	{
		void show1()
		{
			System.out.println("B - Show1 Method");
		}
	}
	class C extends B 
	{
		void show2()
		{
			System.out.println("C - Show2 Method");
		}
	}
}


class Q41_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.C c = a.new C();
		c.show1();
		c.show2();
	}
}

/*

		
B - Show1 Method
C - Show2 Method

--------------------------------------------------------------------------------------
*/







class A
{
	A()
	{
		System.out.println("A - Constructor");
	}
}
class B extends A
{
	B()
	{
		System.out.println("B - Constructor");
	}
}
class C extends B
{
	C()
	{
		System.out.println("C - Constructor");
	}
}


class Q42_Instance_Inner_Class
{
	public static void main( String args[])
	{
		C c = new C();
	}
}

/*

		
A - Constructor
B - Constructor
C - Constructor

--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		B()
		{
			System.out.println("B - Constructor");
		}
	}
	class C extends B
	{
		C()
		{
			System.out.println("C - Constructor");
		}
	}
}


class Q43_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.C c = a.new C();
	}
}

/*

		
B - Constructor
C - Constructor

--------------------------------------------------------------------------------------
*/







abstract class A
{
	void show()
	{
		System.out.println("Abstract Show");
	}
}

class Q44_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
	}
}

/*

		
error: A is abstract; cannot be instantiated
                A a = new A();
                      ^

--------------------------------------------------------------------------------------
*/







abstract class A
{
	void show()
	{
		System.out.println("A - Abstract Show");
	}
}

class B extends A
{}

class Q45_Instance_Inner_Class
{
	public static void main( String args[])
	{
		B b = new B();
		b.show();
	}
}

/*

		
A - Abstract Show

--------------------------------------------------------------------------------------
*/







abstract class A
{
	class B
	{
		void show()
		{
			System.out.println("A - Abstract Show");
		}
	}
}

class C extends A
{}

class Q46_Instance_Inner_Class
{
	public static void main( String args[])
	{
		C c = new C();
		
		C.B b = c.new B();
		b.show();
	}
}

/*

		
A - Abstract Show

--------------------------------------------------------------------------------------
*/







abstract class A
{
	class B
	{
		void show()
		{
			System.out.println("A - Abstract Show");
		}
	}
}

class B extends A
{}

class Q47_Instance_Inner_Class
{
	public static void main( String args[])
	{
		B b1 = new B();
		
		B.B b2 = b1.new B();
		b2.show();
	}
}

/*

		
A - Abstract Show

--------------------------------------------------------------------------------------
*/







class A
{
	class A 
	{
		void show()
		{
			System.out.println("A - Abstract Show");
		}
	}
}

class Q48_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
	}
}

/*

		
error: class A is already defined in package unnamed package
        class A
        ^

--------------------------------------------------------------------------------------
*/







class A
{
	abstract class B
	{
		void show()
		{
			System.out.println("A - Abstract Show");
		}
	}
}

class Q49_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.B b = a.new B();
	}
}

/*

		
error: A.B is abstract; cannot be instantiated
                A.B b = a.new B();
                          ^
--------------------------------------------------------------------------------------
*/







class A
{
	abstract class B
	{
		void show()
		{
			System.out.println("A - B - Abstract Show");
		}
	}
	
	class C extends B 
	{}
}

class Q50_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.C c = a.new C();
		c.show();
		
	}
}

/*

		
A - B - Abstract Show
--------------------------------------------------------------------------------------
*/







class A
{
	class B
	{
		abstract void show();
	}
}

class Q51_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
	}
}

/*

error: A.B is not abstract and does not override abstract method show() in A.B
        class B
        ^

--------------------------------------------------------------------------------------
*/







class A
{
	abstract class B
	{
		abstract void show();
	}
}

class Q52_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
	}
}

/*


Blank
--------------------------------------------------------------------------------------
*/







class A
{
	abstract class B
	{
		abstract void show();
	}
	
	class C extends B 
	{}
}

class Q53_Instance_Inner_Class
{
	public static void main( String args[])
	{
		A a = new A();
		
		A.C c = a.new C();
		
	}
}

/*


 A.C is not abstract and does not override abstract method show() in A.B
        class C extends B
        ^
--------------------------------------------------------------------------------------
*/







