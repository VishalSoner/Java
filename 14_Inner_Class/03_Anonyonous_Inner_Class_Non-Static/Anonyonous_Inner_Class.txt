A nested class that doesn't have any name is known as an anonymous class.
An anonymous class must be defined inside another class. Hence, it is also known as an anonymous inner class. Its syntax is:




abstract class A 
{
	void show()
	{
		System.out.println("Vishal Soner - 1");
	}
}


class Q01_Anonyonous_Inner_Class
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 

error: A is abstract; cannot be instantiated
                A a = new A();
                      ^

-----------------------------------------------------------------------------------------------
*/



abstract class A 
{
	void show()
	{
		System.out.println("Vishal Soner - 1");
	}
}


class Q02_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A(){};
		a.show();
	}
}

/* 

Vishal Soner - 1


1. Super Class ka referance variable sub-class ke object ko store kar sakta he.

2. Abstract class ka Object nai bana sakte he,
3. But Abstract class ka referance create kar sakte he.


-----------------------------------------------------------------------------------------------
*/




/* 
	1. Super Class ka referance variable sub-class ke object ko store kar sakta he.

	2. Abstract class ka Object nai bana sakte he,
	3. But Abstract class ka referance create kar sakte he. 

*/
abstract class A 
{
	void show()
	{
		System.out.println("Vishal Soner - 1");
	}
}

class B extends A
{}


class Q03_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new B();
		a.show();
	}
}

/* 

Vishal Soner - 1


1. We create Class B.
2. Class B extends A (inherit).
3. Create Object Class B.
4. B Class ke Object ko Super Class A ka referance variable a hold kar raha he.


-----------------------------------------------------------------------------------------------
*/




abstract class A 
{}

class Q04_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A(){};
		System.out.println("Main Method");
		
	}
}

/* 

Main Method


-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show();
}

class Q05_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A(){};
		
		System.out.println("Main Method");
	}
}

/* 

error: <anonymous Q05_Anonyonous_Inner_Class$1> is not abstract and does not override abstract method show() in A	
	A a = new A(){};
				  ^

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show();
}

class B extends A 
{
	
}

class Q06_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		B b = new B();
		System.out.println("Main Method");
	}
}

/* 

error: B is not abstract and does not override abstract method show() in A
class B extends A
^


-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show();
}

class B extends A 
{
	void show()
	{
		System.out.println("Class B show Method");
	}
	
}

class Q07_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		B b = new B();
		b.show();
		System.out.println("Main Method");
	}
}

/* 

Class B show Method
Main Method


-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show();
}

class Q08_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A()
		{
			void show()
			{
				System.out.println("Anonymous Class show Method");
			}
		};
		a.show();
		System.out.println("Main Method");
	}
}

/* 

Anonymous Class show Method
Main Method


After Compile : 
A.class
Q10_Anonyonous_Inner_Class_extends.class
Q10_Anonyonous_Inner_Class_extends$1.class
-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show1();
	abstract void show2();
}

class Q09_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A()
		{
			void show1()
			{
				System.out.println("Anonymous Class show Method");
			}
		};
		a.show1();
		System.out.println("Main Method");
	}
}

/* 

error: <anonymous Q08_Anonyonous_Inner_Class$1> is not abstract and does not override abstract method show2() in A
                {
                ^


-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show1();
	abstract void show2();
}

class Q10_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A()
		{
			void show1()
			{
				System.out.println("Anonymous Class show Method - 1");
			}
						
			void show2()
			{
				System.out.println("Anonymous Class show Method - 2");
			}
			
		};
		a.show1();
		a.show2();
		System.out.println("Main Method");
	}
}

/* 

Anonymous Class show Method - 1
Anonymous Class show Method - 2
Main Method




After Compile : 
A.class
Q10_Anonyonous_Inner_Class_extends.class
Q10_Anonyonous_Inner_Class_extends$1.class

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show1();
}

class Q11_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a1 = new A()
		{
			void show1()
			{
				System.out.println("First Anonymous Class");
			}
		};

		A a2 = new A()
		{
			void show1()
			{
				System.out.println("Second Anonymous Class");
			}
		};
		
		a1.show1();
		a2.show1();
	}
}

/* 

First Anonymous Class
Second Anonymous Class



After Compile : 
A.class
Q11_Anonyonous_Inner_Class_extends.class
Q11_Anonyonous_Inner_Class_extends$1.class
Q11_Anonyonous_Inner_Class_extends$2.class

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract int cube(int x);
}

class Q12_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a1 = new A()
		{
			int cube(int x)
			{
				return x*x*x;
			}
		};
		
		int cube1 = a1.cube(10);
		System.out.println("Cude : " + cube1);
	}
}

/* 

Cude : 1000

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show();
}

class Q13_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		new A()
		{
			void show()
			{
				System.out.println("Show Method");
			}
		}.show();
	}
}

/* 

Show Method

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract void show();
}

class Q14_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A()
		{
			void show()
			{
				System.out.println("Show Method");
			}
		}.show();
	}
}

/* 

error: incompatible types: void cannot be converted to A
    }.show();
		  ^

.show() method void return kar rahi he or void ko object me types cast nai kar sakte
OR
void ka A a(Object) me store nai kar sakte.

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract int cube(int x);
}

class Q15_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		int cube_data = new A()
		{
			int cube(int x)
			{
				return x*x*x;
			}
		}.cube(5);
		
		System.out.println("Cude : " + cube_data);
	}
}

/* 

Cude : 125

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract A show();
}

class Q16_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		A a = new A()
		{
			A show()
			{
				System.out.println("Show Method");
				return this;
			}
		}.show();
	}
}

/* 

show Method

-----------------------------------------------------------------------------------------------
*/




abstract class A 
{
	abstract A show();
}

class Q17_Anonyonous_Inner_Class
{
	public static void main(String args[])
	{
		A a = new A()
		{
			A show()
			{
				System.out.println("Show Method");
				return this;
			}
		}.show();
	}
}

/* 

show Method

-----------------------------------------------------------------------------------------------
*/




class Employee
{
	void name()
	{
		System.out.println("Vishal Soner -1");
	}
	
	void salary()
	{
		System.out.println("Salary : 50,000");
	}
	
}

class Q17_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		Employee e1= new Employee();
		Employee e2= new Employee();
		Employee e3= new Employee();
		
		e1.name();
		e1.salary();
		
		e2.name();
		e2.salary();
		
		e3.name();
		e3.salary();
	}
}

/* 

Vishal Soner -1
Salary : 50,000

Vishal Soner -1
Salary : 50,000

Vishal Soner -1
Salary : 50,000

-----------------------------------------------------------------------------------------------
*/




class Employee
{
	void name()
	{
		System.out.println("Vishal");
	}
	
	void salary()
	{
		System.out.println("500");
	}
}

class Employee2 extends Employee
{
	void salary()
	{
		System.out.println("700");
	}
}

class Q18_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		Employee e1= new Employee2();
		Employee e2= new Employee2();
		Employee e3= new Employee2();
		
		e1.name();
		e1.salary();
		
		e2.name();
		e2.salary();
		
		e3.name();
		e3.salary();
	}
}

/* 

Vishal
700

Vishal
700

Vishal
700

-----------------------------------------------------------------------------------------------
*/




class Employee
{
	void name()
	{
		System.out.println("Vishal");
	}
	
	void salary()
	{
		System.out.println("500");
	}
}

class Q19_Anonyonous_Inner_Class_extends
{
	public static void main(String args[])
	{
		Employee e1= new Employee()
		{
			void salary()
			{
				System.out.println("700");
			}
		};
		
		Employee e2= new Employee();
		Employee e3= new Employee();
		
		e1.name();
		e1.salary();
		
		e2.name();
		e2.salary();
		
		e3.name();
		e3.salary();
	}
}

/* 

Vishal
700

Vishal
500

Vishal
500

-----------------------------------------------------------------------------------------------
*/





interface Inter1
{
	void show();
}

class Q20_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1();
	}
}

/* 
error: Inter1 is abstract; cannot be instantiated
                Inter1 in1 = new Inter1();
                             ^
-----------------------------------------------------------------------------------------------
*/






interface Inter1
{
	void show();
}

class Q21_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1(){};
	}
}

/* 
error: <anonymous Q21_Anonyonous_Inner_Class_implements$1> is not abstract and does not override abstract method show() in Inter1
                Inter1 in1 = new Inter1(){};
                                         ^
-----------------------------------------------------------------------------------------------
*/













interface Inter1
{
	void show();
}

class A implements Inter1
{
	void show()
	{
		System.out.println("Vishal Soner");
	}
}

class Q22_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 
 error: show() in A cannot implement show() in Inter1
        void show()
             ^
  attempting to assign weaker access privileges; was public
-----------------------------------------------------------------------------------------------
*/




interface Inter1
{
	void show();
}

class A implements Inter1
{
	public void show()
	{
		System.out.println("Vishal Soner");
	}
}

class Q23_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		A a = new A();
		a.show();
	}
}

/* 
Vishal Soner
-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	void show();
}

class Q24_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1()
		{
			void show()
			{
				System.out.println("Vishal Soner");
			}
		};
		
		in1.show();
	}
}

/* 
error: show() in <anonymous Q22_Anonyonous_Inner_Class_implements$1> cannot implement show() in Inter1
                        void show()
                             ^
-----------------------------------------------------------------------------------------------
*/










interface Inter1
{
	void show();
}

class Q25_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1()
		{
			public void show()
			{
				System.out.println("Vishal Soner");
			}
		};
		
		in1.show();
	}
}

/* 
Vishal Soner
-----------------------------------------------------------------------------------------------
*/








interface Inter1
{
	void show1();
	void show2();
}

class Q26_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1()
		{
			public void show1()
			{
				System.out.println("Vishal Soner");
			}
		};
		
		in1.show1();
	}
}

/* 

error: <anonymous Q26_Anonyonous_Inner_Class_implements$1> is not abstract and does not override abstract method show2() in Inter1
                {
                ^
-----------------------------------------------------------------------------------------------
*/








interface Inter1
{
	void show1();
	void show2();
}

class Q27_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1()
		{
			public void show1()
			{
				System.out.println("Show - 1");
			}

			public void show2()
			{
				System.out.println("Show - 2");
			}
		};
		
		in1.show1();
		in1.show2();
	}
}

/* 

Show - 1
Show - 2

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int cude(int x);
}

class Q28_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1()
		{
			public int cude(int x)
			{
				return x*x*x;
			}
		};
		
		System.out.println("Cude : " + in1.cude(10) );
	}
}

/* 

Cude : 1000

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int cude(int x);
}

class Q29_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		Inter1 in1 = new Inter1()
		{
			public int cude(int x)
			{
				return x*x*x;
			}
		}.cude(10);
		
	}
}

/* 

error: incompatible types: int cannot be converted to Inter1
                }.cude(10);
                      ^

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int cude(int x);
}

class Q30_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		int in1 = new Inter1()
		{
			public int cude(int x)
			{
				return x*x*x;
			}
		}.cude(10);
	
		System.out.println("Cude : " + in1 );
	}
}

/*

Cude : 1000

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int cude(int x);
}

class Q31_Anonyonous_Inner_Class_implements
{
	public static void main(String args[])
	{
		int in1 = new Inter1()
		{
			public int cude(int x)
			{
				return x*x*x;
			}
		};
	
		System.out.println("Cude : " + in1.cude(10) );
	}
}

/*

 error: incompatible types: <anonymous Inter1> cannot be converted to int
                int in1 = new Inter1()
                          ^

-----------------------------------------------------------------------------------------------
*/












/*
	1. Function Interface : is a Interface that contains only one abstract method.
	2. Lambda Expresion   : Function Interface me woek karta he,  ye version 1.8 me add hua he.
	
*/

interface Inter1
{
	void show();
}

class Q32_Function_Interface
{
	public static void main(String args[])
	{
		Inter1 in1 = ()->{		System.out.println("Function Interface");		};
		in1.show();
		in1.show();
	}
}

/*

Function Interface
Function Interface

-----------------------------------------------------------------------------------------------
*/







/*
	1. Function Interface : is a Interface that contains only one abstract method.
	2. Lambda Expresion   : Function Interface me woek karta he,  ye version 1.8 me add hua he.
	
*/

interface Inter1
{
	void show();
}

class Q33_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in1 = ()->{		System.out.println("Lambda Expresion - 1");		};
		in1.show();
		
		//Also do like this :
		Inter1 in2 = ()->	System.out.println("Lambda Expresion - 2");		;
		in2.show();
	}
}

/*

Lambda Expresion - 1
Lambda Expresion - 2

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	void show();
}

class Q34_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in1 = ()->{		
							System.out.println("Lambda Expresion - 1");		
							System.out.println("Lambda Expresion - 2");
						};
		in1.show();
	}
}

/*

Lambda Expresion - 1
Lambda Expresion - 2

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	void show();
}

class Q35_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in1 = ()->
		System.out.println("Lambda Expresion - 1");		
		System.out.println("Lambda Expresion - 2");
		
		in1.show();
	}
}

/*

Lambda Expresion - 2
Lambda Expresion - 1



Internally : Work like this.
Inter1 in1 = ()->System.out.println("Lambda Expresion - 1");		

System.out.println("Lambda Expresion - 2");
-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int cude(int x);
}

class Q36_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in1 = (int x)->
		{
			return x*x*x;
		};
		
		System.out.println("Cude : " + in1.cude(10) );
	}
}

/*
Cude : 1000

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int cude(int x);
}

class Q37_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in1 = (int x)->{			return x*x*x;		};
		System.out.println("Cude : " + in1.cude(2) );
		
		Inter1 in2 = (x)->{			return x*x*x;		};
		System.out.println("Cude : " + in2.cude(3) );
		
		Inter1 in3 = x->{			return x*x*x;		};
		System.out.println("Cude : " + in3.cude(4) );
		
		
	}
}

/*
Cude : 8
Cude : 27
Cude : 64

-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int multi(int x, int y);
}

class Q38_Lambda_Expresion
{
	public static void main(String args[])
	{
		// 01
		Inter1 in1 = (int x, int y)->{			return x*y;			};
		System.out.println("Multi : " + in1.multi(10, 5) );
		
		// 02
		Inter1 in2 = (x, y)->{					    return x*y;			};
		System.out.println("Multi : " + in2.multi(10, 25) );
		
		//03
		// Inter1 in3 = x,y->{					    return x*y;			};
		// System.out.println("Multi : " + in3.multi(10, 50) );
		
		
	}
}

/*
// 01
Multi : 50

// 02
Multi : 250

// 03
error: ';' expected
	Inter1 in3 = x,y->{                                         return x*y;                 };
                   ^



-----------------------------------------------------------------------------------------------
*/







interface Inter1
{
	int multi(int x, int y);
}

class Q39_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in = (int x, int y)->	return x*y;	
		Inter1 in = (x, y)->	return x*y;			//Same Error
		
		System.out.println("Cude : " + in.multi(10, 20));
	}
}


/*

 error: illegal start of expression
    Inter1 in = (int x, int y)->    return x*y;
                            ^


--------------------------------------------------------
*/




interface Inter1
{
	int multi(int x, int y);
}

class Q40_Lambda_Expresion
{
	public static void main(String args[])
	{
		Inter1 in1 = (int x, int y)->	x*y;	
		System.out.println("Cude : " + in1.multi(10, 5));
		
		Inter1 in2 = (x, y)->	x*y;			//Same Work
		System.out.println("Cude : " + in2.multi(10, 10));
	}
}


/*

Cude : 50
Cude : 100



--------------------------------------------------------
*/